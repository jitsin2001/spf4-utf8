\ Feb.2008 

Макет форт-системы. Цель: отработка композиции и сборки (раскрутки).


index.f -- сборка и запуск 32-битной макетной форт-системы.
    Система располагается в двух динамически выделенных блоках памяти
    (пространства кода и данных), использует еще три динамически выделенных
    блока под управляющий стек, стек контекста и буфер PAD; стек данных,
    стек возвратов и код слов форт-процессора берутся из инструментальной
    форт-системы.
    Подробней см. "!readme.ru.xml" (там же даны понятия и состав
    форт-процессора, кодогенератора, интерпретатора и транслятора).


spf4-64.test.f -- сборка 64-битного форт-процессора.
    Лексикон слов форт-процессора расположен в словаре emu64
    инструментальной системы и включает порядка 130 слов,
    из которых примитвы составляют два десятка, все остальные же
    слова определены на их базе (поэтому он и эмулятор).
    В силу того, что эти высокоуровневые определения содержат
    литералы и управление потоком исполнения
    (в том числе через стек возвратов), они должны компилироваться
    в 64-битный код. Поэтому, для их сборки в систему вначале загружается 
    переходной кодогенератор, порождающий 64-битный код,
    и использующий его транслятор (а именно, просто в новом контексте
    в отдельное пространство повторно подгружен набор правил ForthML).
    После этого, используя этот транслятор, загружаются высокоуровневые
    определения форт-процессора.
    

spf4-host64.f -- сборка и запуск 64-битного транслятора plainForth.
    Вначале в отдельный словарь инструментальной системы (а именно,
    в словарь emu64) собирается 64-битный форт-процессор. Далее, на эту
    базу загружается уже родной 64-битный кодогенератор и интерпретатор
    (реализация интерпретатора никак не завязана на размер ячейки,
    его надо лишь подключить поверх заданной базы). В конце подключается
    транслятор plainForth в виде простого интерпретирующего QUIT.
    После инициализации загруженного интепретатора в нем создается
    словарь FORTH-WL, в который и импортируются все слова из словаря emu64.
    Этот импорт делается затем, что загруженный интерпретатор ничего
    не знает о структуре словаря и контекста иструментальной системы
    и не использует их.
    Конечно, вместо подключения отдельного интерпретатора можно было бы сделать
    обертку к инструментальной системе, но ведь многоразовый интерпретатор-то
    давно готов, а одноразовую обертку надо еще делать, поэтому
    импортировать слова -- проще ;)





Пока открытым остается вопрос о том,
  как при сборке целевой системы обойтись без выполнения слов из целевой системы.

  В частности, при сборке, для управления контекстом исполняются целевые слова,
  возвращающие wid.

  Одно из решений: эмулировать выполнение таких слов, разбирая отложенный код.
  В частности, списки слов -- это константы, а сделать эмуляцию выполнения константы
  не так уж сложно (если проэмулировать не удалось, то порождать исключение).

  [eсли ограничиться immutable-кодом, то]

  Другое решение,
  -- одновременно с определениями в целевой образ делать теневые определения
  в формате инструментальной системы и связывать пары этих xt в отдельном списке.
  Тогда, при необходимости выполнить слово из целевой системы, по его xt 
  ищется теневой вариант, который и исполняется.

  [eсли ограничиться списками слов, то]

  Другое решение,
  -- управлять контекстом, ссылаясь на списки слов через уникальные унифицированные 
  имена в отдельном пространстве имен, вместо того, чтобы обращаться к ним через
  имя слова, дающего wid. В конечном итоге, все равно будет получен wid, то при этом
  не нужно выполнять код из целевой системы, и имя будет однозначно разрешено
  независимо от текущего контекста.



Другой открытый вопрос -- это сборка целевой системы через plainForth.
  Как собрать множество списков слов в целевой системе?
  Здесь ситуация из предыдущего вопроса осложнена тем,
  что на данный момент слова из целевой системы доступны только косвенно,
  через "&", а управление контекстом появляется в тексте прямо как есть,
  без маскировки и, значит, ищется только среди слов ЦК. Значит, слово
  из целевой системы, несущее wid, или не найдется транслятором,
  или неверно разрешится.
