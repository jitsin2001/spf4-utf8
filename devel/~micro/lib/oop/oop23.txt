Описание ООП-библиотеки.

Идеи просты как форт:
1. Основные
1.1. У класса есть словарь
1.2. Метод - это слово-двоеточие
1.3. Структуры описываются через "--" как обычно
1.4. Поле по адресу экземпляра вычисляет адрес поля
1.5. В словаре класса хранятся методы и поля
2. Реализация в ~micro/lib/oop/oop23.f
2.1. При создании класса создаём словарь, оставляем размер экземпляра, равный
     нулю для слов "--", сохраняем адрес размера для получения возможности
     его использования при создании методов без необходимости помечать
     окончание описания полей
2.2. Слово-класс имеет признак IMMEDIATE, и при исполнении ALSO-ет свой словарь,
     который необходимо PREVIOUS-ить, когда класс более не нужен. Многие слова
     этой библиотеки, слова-классы и слова-объекты (о них ниже) делают это сами.
2.3. Чтобы не приходилось много раз упоминать имя класса при работе с ним,
     есть возможность указывать начало и конец части программы, где этот класс
     используется по умолчанию. Допустима вложенность таких конструкций.
2.4. Наследование - by 1001bytes
3. Дополнительные возможности
3.1. Пусть у нас будут кроме экземпляров, доступных только по адресу, ещё и
     именованные объекты, которые будут знать какого они класса
3.2. Позднее связывание - указываем метод, а к экземпляру какого класса
     применяем указываем при исполнении
4. Реализация в ~micro/lib/oop/oop23.vis.f
4.1. При исполнении объекта на стеке остаётся адрес и происходит то же, что и
     при исполнении слова-класса
4.2. Позднее связывание сделано тупо и в лоб - метод компиляется как строка, а
     при исполнении ищем его в словаре.
5. Как это использовать
5.1. Создание класса
CLASS: <class> ( -- size ) \ Создание класса
<len1> -- <field1>         \ Создание полей
<len2> -- <field2>
MYSIZE .                   \ Выводим размер экземпляра
: <method1>                \ Создание метода
  MYSIZE                   \ компиляция размера экземпляра
;
;CLASS         ( size -- )

5.2. Создание и использование экземпляра
INST <class> <inst1>                \ Создание экземпляра
SIZEOF <class> ALLOCATE THROW ...   \ ... ручками. SIZEOF - IMMEDIATE
<inst> ( addr )         \ взяли адрес
<class>                 \ приALSOли словарь класса
<method>                \ выполнили метод/поле
|CLASS                  \ можно закрыть класс, чтобы следующие слова брались
                        \ не из его словаря
WITH <class1>           \ задаём классы по умолчанию в них не должно быть
  WITH <class2>         \ методов с одинаковым названием
    <inst1> <method1>
    |CLASS              \ А здесь это не сработает
    <inst2> <method2>
    <inst3> <class3> <method3> |CLASS \ здесь как обычно
  ENDWITH               \ Закрываем так
ENDWITH

5.2. Создание и использование объекта
OBJECT <class> <obj> \ Описали объект
<obj1> ( addr )      \ взяли адрес объекта и приALSOли словарь
<method1>            \ выполнили метод
|CLASS               \ если нужно закрыли методы класса

5.3. Описание экземпляров и объектов как полей
CLASS: <class>               \ новый класс
SIZEOF <class1> -- <field1>  \ тут экземпляр
CLASS <class2> <field2>      \ а тут объект
;CLASS
INST <class> <inst>
<inst> <class> <field1> <class1> <method1>
<inst> <class> <field2>          <method2> \ класс не указываем

5.4. Позднее связывание
: <w1>
...
POSTPONE <class1>
...
RUN <method>
...
POSTPONE |CLASS
;

Примеры: ~micro/calc/fpnum.f, ~micro/calc/string.f, ~micro/calc.bl.