                        Cоглашения по оформлению кода.

                              Общие параметры.

     Ширина  экрана  не  превышает 76 символов - текст не должен выходить за
его   пределы.   Слова  базовой  системы   набираются  в  верхнем  регистре,
дополнительные  слова,  реализация которых  может меняться,  а так же слова,
которые нельзя использовать в нижнем регистре либо вРазБрос. Прототипы слов,
то есть слова, которые никогда не вызываются по-имени, заключаются в круглые
скобки.

                                 Заголовок.

В начале подключаемого файла находится заголовок:
 - в самой первой строке - дата создания файла.
 - во второй строчке копирайт.
 - в третьей и последующих строках идет описание содержимого файла.
В заголовке не должно быть более пяти строк. При необходимости более
подробного описания текста файла, само описание выносится в конец файла за
слово \EOF .


                      Переключение системы исчисления.

     Основная  система  исчисления  десятичная. Слова переключения основания
системы  выравниваются  по  центру  экрана  (HEX  DECIMAL). Где только можно
используется 0xABC формат представления шестнадцатеричных чисел.


                                Комментарии.

Используется три вида комментариев:
 - комментарий до конца текста: Все после слова '\EOF' до конца файла;
 - комментарий до конца строки: после слова '\' до конца строки;
 - скобочный комментарий: начинается словом '(' заканчивается символами ') '

     Комментарии до  конца  файла  используются  лишь в случае необходимости
многословного описания содержимого файла.

     Комментарии до конца строки используются везде, где нужен комментарий.

     Скобочный комментарий  используется  для отображения стековых диаграмм.
Наличие  стековых диаграмм обязательно для любых слов, создающих заголовки в
целевом  словаре.  Стековая диаграмма обычно выглядит так:
  ( состояние стека до исполнения слова --> состояние стека после) .
     Использование  круглых  скобок для других видов комментариев запрещено.
Стековый  комментарий  начинается  либо сразу после имени слова (если начато
двоеточное  определение),  либо  после перечисления необходимых параметров в
той  же  строке,  где  создается  имя  слова.  Внутри  стекового комментария
возможно  описание  выполняемой  словом  функции, например ( n --> n+4 ) для
слова  CELL+. Если слово берет что-то из входного потока то это отображается
в  комментарии  после  символа '/' пример: ( n / name --> ). Для отображения
вариантов  принимаемых или возвращаемых значений используется символ '|' : (
a b c --> n true | false ). Изменение на стеке возвратов тоже отображается с
помощью идентификатора r: : RDROP ( r: n --> ), изменения на стеке данных по
умолчанию  никак  не  выделяются, но при использовании r: изменения на стеке
данных  идентифицируются  по  символу d: , например:
: R+ ( d: a r: b --> r: a+b  )  ...  ;
внутри стековой диаграммы допускается отображение действий, производимых над
входными данными, как на примере выше.
     Внутри слова может быть только один стековый комментарий.


                  Оформление высокоуровневых определений.

        Написание каждого слова начинается с комментария:

\ комментарий перед словом должен отвечать на вопрос "что делает слово"
: Пример ( стековая --> диаграмма ) если код вмещается в одну строку ;

комментарий располагается  перед  началом  определения  и не должен занимать
более  трех  строчек  текста.  Стековая  диаграмма находится сразу за именем
слова. Если код слова вмещается в одну строку сразу за стековым комментарием
то он не переносится на следующую строку.

\ пример многострочного определения
: ИмяСлова ( a / name --> b true | false )
           если код слова не вмещается на одну строку вместе с коментарием
           то он переносится на следующую строку, и начинается под стековой
           диаграммой,
           с этой же позиции начинается каждая новая строка ;

\ пример комментирования кода
: EXCHANGE ( a addr --> b )
           DUP @            \ --> a addr [addr]
           -ROT ! ;         \ сохранили новое значение

\ пример выделения структур управления
: (prompt) ( --> )
           STATE @ IF ." ]"     \ если ветвления не вмещаются на одну
                    ELSE CR     \ строку то отступ ELSE на одну позицию
                         ." >"  \ от IF, код после ELSE равняется
                   THEN ;       \ THEN возвращает отступ на место.

\ пример выделения циклов
: ( ( --> )
    BEGIN NEXT-WORD DUP WHILE           \ условие выхода - последнее слово
          + char - C@ [CHAR] ) <> WHILE \ в строке

      REPEAT EXIT                \ в зависимости от варианта использования
    THEN 2DROP                   \ REPPEAT либо возвращает отступ до уровня
    ; IMMEDIATE                  \ BEGIN либо не доходит до него две позиции.

Как в приведенном выше примере логические блоки могут отделяться друг от
друга одной пустой строкой, впрочем, в ней может находиться комментарий.








